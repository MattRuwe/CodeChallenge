<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2066ea1c-ad0e-49ae-8211-b46eb4388169}</ProjectGuid>
    <SHFBSchemaVersion>1.9.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>MazeDoc</AssemblyName>
    <RootNamespace>MazeDoc</RootNamespace>
    <Name>MazeDoc</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>Maze Challenge Doc</HtmlHelpName>
    <Language>en-US</Language>
    <SccProjectName>SAK</SccProjectName>
    <SccProvider>SAK</SccProvider>
    <SccAuxPath>SAK</SccAuxPath>
    <SccLocalPath>SAK</SccLocalPath>
    <DocumentationSources>
      <DocumentationSource sourceFile="..\MazeChallenge\bin\Release\OmahaMTG.Challenge.MazeChallenge.xml" />
<DocumentationSource sourceFile="..\MazeChallenge\bin\Release\OmahaMTG.Challenge.MazeChallenge.dll" /></DocumentationSources>
    <SyntaxFilters>CSharp, VisualBasic</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceContainer>False</RootNamespaceContainer>
    <PresentationStyle>vs2005</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>Guid</NamingMethod>
    <HelpTitle>Maze Challenge Doc</HelpTitle>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <ProjectSummary>
    </ProjectSummary>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="OmahaMTG.Challenge.Challenges" isDocumented="True">&lt;h2&gt;Welcome to the OmahaMTG Maze Code Challenge!&lt;/h2&gt;

&lt;p&gt;In this challenge, you will solve a classic maze problem.  The mazes generated for this challenge are all &amp;quot;perfect&amp;quot; mazes, meaning that there is only one solution from any given point to another point.  The start point is always in the upper left-hand corner and the end point is always in the lower right-hand corner.  In addition, all mazes are square (i.e. same height and width).  To solve the maze, you must move through the maze going from one cell to another from start to end.  Each cell has 4 potential walls (North, South, East, and West).  To move from one cell to another, the wall between the cells must not be present.  If a wall does exist and an entry tries to move through it, the entry will be stopped and it will receive a score of 0.  Each movement between cells is considered a move that will deduct from your total score as described below.&lt;/p&gt;

&lt;p&gt;Scoring for this challenge uses the following formula:&lt;br /&gt;
Math.Max(100000 - (100000 * (moves / (Math.Pow(mazeSize, 2) * 2))) - (elapsedMilliseconds * 2) - RevealPointsLost, 0) + (solvedMaze ? 5000 : 0)&lt;/p&gt;

&lt;p&gt;In summary, the score is primarily based on what percetage of the total allowed moves the entry used.  The total number of allowed moves is defined as the the size of the maze squared times 2 (i.e. the total number of cells in the maze times two).  This gives each entry the ability to traverse each cell of the maze twice allowing for back tracking if a dead-end is reached.  The next component of scoring is the amount of time your entry takes to run.  Entries will lose 2 points for every millisecond that elapses during a given run.  Next, the entry will lose a certain amount of points for each time a call to the &lt;see cref="M:OmahaMTG.Challenge.Challenges.IMazeChallenge.StartNewMaze(System.Func{System.Int32,OmahaMTG.Challenge.Challenges.Maze})" /&gt; method's revealVicinity parameter is invoked (see method documentation for details).  Finally, if the entry successfully solves the maze, a 5,000 point bonus will be added to the total.  For example, if an entry is given a 100x100 maze and solves this maze in 15,000 moves and takes 10 milliseconds to to so, the final score will be: 100,000 - (100,000 * .75) - 20 + 5,000 = 29,980&lt;/p&gt;

&lt;h3&gt;Test Mode&lt;/h3&gt;
&lt;p&gt;This is our first challenge to introduce the concept of Test mode (Run Entry as Test option).  This mode allows users to submit entries that run against alternative sets of data, and gives additional feedback about how the entry ran.  For the maze challenge, test mode outputs a visual representation of the maze and how your entry tried to solve it.  Additionally, detailed logs about the moves your entry made are available.  Please note, however, that while in test mode all scores are always unpublished and each run will generate a new random maze.  You should not assume that because your entry scored well in test mode that it will also score well in normal mode.  Here is a sample images of a solved maze:&lt;/p&gt;
&lt;img src="../Images/Maze.png" /&gt;</NamespaceSummaryItem>
<NamespaceSummaryItem name="(global)" isDocumented="False" /></NamespaceSummaries>
    <MissingTags>AutoDocumentCtors, AutoDocumentDispose</MissingTags>
    <ApiFilter />
    <ComponentConfigurations />
    <HelpAttributes />
    <PlugInConfigurations />
    <BuildLogFile />
    <HtmlHelp1xCompilerPath />
    <HtmlHelp2xCompilerPath />
    <SandcastlePath />
    <WorkingPath />
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\MazeChallenge\MazeChallenge.vbproj">
      <Name>MazeChallenge</Name>
      <Project>{1326afa2-c39e-4218-b2b4-7c9cde20e256}</Project>
      <Private>True</Private>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Images" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Images\Maze.png">
      <ImageId>Maze</ImageId>
      <AlternateText>Maze</AlternateText>
      <CopyToMedia>True</CopyToMedia>
    </Content>
  </ItemGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>